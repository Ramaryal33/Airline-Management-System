package com.airline.controller;

import com.airline.staff.model.Staff;
import com.airline.staff.model.Department;
import com.airline.staff.service.StaffService;
import com.airline.staff.service.DepartmentService;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.util.List;

@SuppressWarnings("serial")
@WebServlet("/staff")
public class StaffController extends HttpServlet {

    private StaffService staffService = new StaffService();
    private DepartmentService departmentService = new DepartmentService();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if ("new".equals(action)) {
            List<Department> departmentList = departmentService.getAllDepartments();
            request.setAttribute("departmentList", departmentList);
            request.getRequestDispatcher("/WEB-INF/page/staff.jsp").forward(request, response);
        } else if ("edit".equals(action)) {
            int staffId = parseIntSafe(request.getParameter("id"));
            Staff staff = staffService.getStaffByUserId(staffId);
            List<Department> departmentList = departmentService.getAllDepartments();
            request.setAttribute("staff", staff);
            request.setAttribute("departmentList", departmentList);
            request.getRequestDispatcher("/WEB-INF/page/staff.jsp").forward(request, response);
        } else if ("delete".equals(action)) {
            int staffId = parseIntSafe(request.getParameter("id"));
            staffService.deleteStaffByUserId(staffId);
            response.sendRedirect("staff");
        } else {
            List<Staff> staffList = staffService.getAllStaff();
            request.setAttribute("staffList", staffList);
            request.getRequestDispatcher("/WEB-INF/page/staff.jsp").forward(request, response);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if ("add".equals(action)) {
            Staff staff = new Staff();
            staff.setFirstName(request.getParameter("firstName"));
            staff.setLastName(request.getParameter("lastName"));
            staff.setEmail(request.getParameter("email"));
            staff.setPhone(request.getParameter("phone"));
            staff.setPosition(request.getParameter("position"));

            // Handle departmentId safely
            String departmentId = request.getParameter("departmentId");
            if (departmentId != null && !departmentId.isEmpty()) {
                staff.setDepartmentId(Integer.parseInt(departmentId));
            }

            // Set Hire Date (new field)
            String hireDateStr = request.getParameter("hireDate");
            if (hireDateStr != null && !hireDateStr.isEmpty()) {
                staff.setHireDate(java.sql.Date.valueOf(hireDateStr)); // Convert to SQL Date
            }

            staff.setStatus(request.getParameter("status"));
            // Handle profile image upload here if needed
            staffService.addStaff(staff);
            request.getRequestDispatcher("/WEB-INF/page/staff.jsp").forward(request, response);
        } else if ("update".equals(action)) {
            int staffId = Integer.parseInt(request.getParameter("staffId"));
            Staff staff = staffService.getStaffByUserId(staffId);
            staff.setFirstName(request.getParameter("firstName"));
            staff.setLastName(request.getParameter("lastName"));
            staff.setEmail(request.getParameter("email"));
            staff.setPhone(request.getParameter("phone"));
            staff.setPosition(request.getParameter("position"));

            // Handle departmentId safely
            String departmentId = request.getParameter("departmentId");
            if (departmentId != null && !departmentId.isEmpty()) {
                staff.setDepartmentId(Integer.parseInt(departmentId));
            }

            // Set Hire Date (new field)
            String hireDateStr = request.getParameter("hireDate");
            if (hireDateStr != null && !hireDateStr.isEmpty()) {
                staff.setHireDate(java.sql.Date.valueOf(hireDateStr)); // Convert to SQL Date
            }

            staff.setStatus(request.getParameter("status"));
            // Handle profile image update here if needed
            staffService.updateStaff(staff);
            request.getRequestDispatcher("/WEB-INF/page/staff.jsp").forward(request, response);
        }
    }

    // Helper method to safely parse integers
    private int parseIntSafe(String value) {
        if (value != null && !value.isEmpty()) {
            try {
                return Integer.parseInt(value);
            } catch (NumberFormatException e) {
                e.printStackTrace();  // Log the exception (or handle it as needed)
            }
        }
        return -1;  // Return a default value indicating invalid or missing value
    }
}
