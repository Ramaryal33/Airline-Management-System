package com.airline.staff.service;

import com.airline.staff.model.Employee;
import com.airline.util.EmployeeDAO;
import com.airline.util.PasswordUtil;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class EmployeeService {
    private final Connection conn;
    private final EmployeeDAO employeeDAO;

    public EmployeeService(Connection conn) {
        this.conn = conn;
        this.employeeDAO = new EmployeeDAO(conn); // Assuming EmployeeDAO needs connection
    }

    // ‚úÖ Improved login method with better error handling
    public Employee login(String email, String password) throws SQLException {
        try {
            Employee employee = employeeDAO.findByEmail(email);
            if (employee != null && PasswordUtil.checkPassword(password, employee.getPasswordHash())) {
                return employee;
            }
            return null;
        } catch (SQLException e) {
            throw new SQLException("Database error during login", e);
        }
    }

    // ‚ûï Create Employee with transaction handling
    public boolean addEmployee(Employee emp) throws SQLException {
        String sql = "INSERT INTO employees (full_name, department_id, position, join_date, status, " +
                    "experience_years, username, password_hash, role, email) " +
                    "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            conn.setAutoCommit(false);
            
            stmt.setString(1, emp.getFullName());
            stmt.setInt(2, emp.getDepartmentId());
            stmt.setString(3, emp.getPosition());
            stmt.setDate(4, new java.sql.Date(emp.getJoinDate().getTime()));
            stmt.setString(5, emp.getStatus());
            stmt.setInt(6, emp.getExperienceYears());
            stmt.setString(7, emp.getUsername());
            stmt.setString(8, emp.getPasswordHash());
            stmt.setString(9, emp.getRole());
            stmt.setString(10, emp.getEmail());
            
            int affectedRows = stmt.executeUpdate();
            conn.commit();
            return affectedRows > 0;
        } catch (SQLException e) {
            conn.rollback();
            throw new SQLException("Failed to add employee", e);
        } finally {
            conn.setAutoCommit(true);
        }
    }

    // üîç Get Employee by ID with proper resource cleanup
    public Employee getEmployeeById(int id) throws SQLException {
        String sql = "SELECT * FROM employees WHERE employee_id = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return extractEmployee(rs);
                }
            }
        }
        return null;
    }

    // üìÉ Get All Employees with pagination support
    public List<Employee> getAllEmployees(int limit, int offset) throws SQLException {
        List<Employee> employees = new ArrayList<>();
        String sql = "SELECT * FROM employees LIMIT ? OFFSET ?";
        
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, limit);
            stmt.setInt(2, offset);
            
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    employees.add(extractEmployee(rs));
                }
            }
        }
        return employees;
    }

    // ‚úèÔ∏è Update Employee with transaction
    public boolean updateEmployee(Employee emp) throws SQLException {
        String sql = "UPDATE employees SET full_name = ?, department_id = ?, position = ?, " +
                    "join_date = ?, status = ?, experience_years = ?, username = ?, " +
                    "password_hash = ?, role = ?, email = ? WHERE employee_id = ?";
        
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            conn.setAutoCommit(false);
            
            stmt.setString(1, emp.getFullName());
            stmt.setInt(2, emp.getDepartmentId());
            stmt.setString(3, emp.getPosition());
            stmt.setDate(4, new java.sql.Date(emp.getJoinDate().getTime()));
            stmt.setString(5, emp.getStatus());
            stmt.setInt(6, emp.getExperienceYears());
            stmt.setString(7, emp.getUsername());
            stmt.setString(8, emp.getPasswordHash());
            stmt.setString(9, emp.getRole());
            stmt.setString(10, emp.getEmail());
            stmt.setInt(11, emp.getEmployeeId());
            
            int affectedRows = stmt.executeUpdate();
            conn.commit();
            return affectedRows > 0;
        } catch (SQLException e) {
            conn.rollback();
            throw new SQLException("Failed to update employee", e);
        } finally {
            conn.setAutoCommit(true);
        }
    }

    // ‚ùå Delete Employee with transaction
    public boolean deleteEmployee(int employeeId) throws SQLException {
        String sql = "DELETE FROM employees WHERE employee_id = ?";
        
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            conn.setAutoCommit(false);
            stmt.setInt(1, employeeId);
            
            int affectedRows = stmt.executeUpdate();
            conn.commit();
            return affectedRows > 0;
        } catch (SQLException e) {
            conn.rollback();
            throw new SQLException("Failed to delete employee", e);
        } finally {
            conn.setAutoCommit(true);
        }
    }

    // Helper method to map ResultSet to Employee
    private Employee extractEmployee(ResultSet rs) throws SQLException {
        Employee employee = new Employee();
        employee.setEmployeeId(rs.getInt("employee_id"));
        employee.setFullName(rs.getString("full_name"));
        employee.setDepartmentId(rs.getInt("department_id"));
        employee.setPosition(rs.getString("position"));
        employee.setJoinDate(rs.getDate("join_date"));
        employee.setStatus(rs.getString("status"));
        employee.setExperienceYears(rs.getInt("experience_years"));
        employee.setUsername(rs.getString("username"));
        employee.setPasswordHash(rs.getString("password_hash"));
        employee.setRole(rs.getString("role"));
        employee.setEmail(rs.getString("email"));
        return employee;
    }
}