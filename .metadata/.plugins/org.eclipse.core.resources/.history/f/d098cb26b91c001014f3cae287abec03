package com.airline.filter;

import java.io.IOException;
import java.util.logging.Logger;

import com.airline.model.User;

import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.annotation.WebFilter;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@WebFilter("/*")
public class AuthFilter implements Filter {
    private static final String[] PUBLIC_PATHS = {"/login", "/register", "/css/", "/js/", "/images/"};

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        HttpServletRequest req = (HttpServletRequest) request;
        HttpServletResponse res = (HttpServletResponse) response;
        String path = req.getRequestURI().substring(req.getContextPath().length());

        // Check if path is public
        for (String publicPath : PUBLIC_PATHS) {
            if (path.startsWith(publicPath)) {
                chain.doFilter(request, response);
                return;
            }
        }

        HttpSession session = req.getSession(false);
        if (session == null || session.getAttribute("user") == null) {
            res.sendRedirect(req.getContextPath() + "/login?redirect=" + URLEncoder.encode(path, "UTF-8"));
            return;
        }

        User user = (User) session.getAttribute("user");
        
        // Check admin paths
        if ((path.startsWith("/admin") || path.equals("/adminDashboard")) 
                && !"Admin".equals(user.getUserType())) {
            res.sendError(HttpServletResponse.SC_FORBIDDEN);
            return;
        }
        
        // Check staff paths
        if ((path.startsWith("/staff") || path.equals("/staffDashboard")) 
                && !"Staff".equals(user.getUserType())) {
            res.sendError(HttpServletResponse.SC_FORBIDDEN);
            return;
        }

        chain.doFilter(request, response);
    }
}