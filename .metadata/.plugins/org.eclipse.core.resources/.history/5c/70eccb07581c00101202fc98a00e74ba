package com.airline.util;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.Base64;

public class PasswordUtil {
    private static final String HASH_ALGORITHM = "SHA-256";
    private static final int SALT_LENGTH = 16;
    private static final int ITERATIONS = 10000;

    public static String hashPassword(String password) throws NoSuchAlgorithmException {
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[SALT_LENGTH];
        random.nextBytes(salt);

        byte[] hash = hashWithSalt(password, salt);

        // Combine salt + hash for storage
        byte[] combined = new byte[SALT_LENGTH + hash.length];
        System.arraycopy(salt, 0, combined, 0, SALT_LENGTH);
        System.arraycopy(hash, 0, combined, SALT_LENGTH, hash.length);

        return Base64.getEncoder().encodeToString(combined);
    }

    public static boolean verifyPassword(String inputPassword, String storedPassword) throws NoSuchAlgorithmException {
        try {
            byte[] combined = Base64.getDecoder().decode(storedPassword);
            if (combined.length < SALT_LENGTH) {
				return false;
			}

            byte[] salt = Arrays.copyOfRange(combined, 0, SALT_LENGTH);
            byte[] storedHash = Arrays.copyOfRange(combined, SALT_LENGTH, combined.length);

            byte[] inputHash = hashWithSalt(inputPassword, salt);

            return constantTimeEquals(inputHash, storedHash);
        } catch (Exception e) {
            System.err.println("Password verification error: " + e.getMessage());
            return false;
        }
    }

    private static byte[] hashWithSalt(String password, byte[] salt) throws NoSuchAlgorithmException {
        byte[] hash = null;
        for (int i = 0; i < ITERATIONS; i++) {
            MessageDigest md = MessageDigest.getInstance(HASH_ALGORITHM);
            if (i == 0) {
                md.update(salt);
                hash = md.digest(password.getBytes());
            } else {
                hash = md.digest(hash);
            }
        }
        return hash;
    }

    // Constant-time comparison to avoid timing attacks
    private static boolean constantTimeEquals(byte[] a, byte[] b) {
        if (a.length != b.length) {
			return false;
		}
        int result = 0;
        for (int i = 0; i < a.length; i++) {
            result |= a[i] ^ b[i];
        }
        return result == 0;
    }

    // Test
    public static void main(String[] args) throws NoSuchAlgorithmException {
        String testPass = "test123";
        String hashed = hashPassword(testPass);
        System.out.println("Hashed: " + hashed);
        System.out.println("Verify (correct): " + verifyPassword(testPass, hashed));
        System.out.println("Verify (wrong): " + verifyPassword("wrongpass", hashed));
    }
}
