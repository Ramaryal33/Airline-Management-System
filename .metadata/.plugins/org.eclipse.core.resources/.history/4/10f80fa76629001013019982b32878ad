package com.airline.controller;

import com.airline.model.User;
import com.airline.staff.model.*;
import com.airline.staff.service.*;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import java.io.IOException;
import java.sql.Date;
import java.time.LocalDate;
import java.util.*;

@WebServlet("/staffDashboard")
public class StaffDashboardController extends HttpServlet {
    private static final long serialVersionUID = 1L;
    
    private StaffService staffService;
    private TaskService taskService;
    private AttendanceService attendanceService;
    private PerformanceReviewService reviewService;

    public StaffDashboardController() {
        staffService = new StaffService();
        taskService = new TaskService();
        attendanceService = new AttendanceService();
        reviewService = new PerformanceReviewService();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("user") == null) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }

        User loggedInUser = (User) session.getAttribute("user");
        Staff staff = staffService.getStaffByUserId(loggedInUser.getId());
        request.setAttribute("staff", staff);

        if (staff != null) {
            int staffId = staff.getStaffId();
            
            // 1. Employee Statistics
            int totalEmployees = staffService.getAllStaff().size();
            double totalHours = attendanceService.getTotalHoursForAllStaff();
            
            // 2. Task Metrics
            List<Task> allTasks = taskService.getAllTasks();
            long activeTasks = allTasks.stream().filter(t -> "In Progress".equals(t.getStatus())).count();
            long pendingTasks = allTasks.stream().filter(t -> "Pending".equals(t.getStatus())).count();
            
            // 3. Performance Data
            List<PerformanceReview> allReviews = reviewService.getAllReviews();
            Map<String, Long> performanceDistribution = calculatePerformanceDistribution(allReviews);
            PerformanceReview topPerformerReview = getTopPerformer(allReviews);
            double avgRating = calculateAverageRating(allReviews);
            
            // 4. Attendance Data
            Date oneMonthAgo = Date.valueOf(LocalDate.now().minusMonths(1));
            List<Attendance> recentAttendance = attendanceService.getAttendanceByDateRange(staffId, oneMonthAgo, Date.valueOf(LocalDate.now()));
            
            // Set all attributes
            request.setAttribute("totalEmployees", totalEmployees);
            request.setAttribute("totalHours", totalHours);
            request.setAttribute("activeTasks", activeTasks);
            request.setAttribute("pendingTasks", pendingTasks);
            request.setAttribute("tasks", allTasks);
            request.setAttribute("performanceDistribution", performanceDistribution);
            request.setAttribute("topPerformer", topPerformerReview);
            request.setAttribute("avgRating", avgRating);
            request.setAttribute("recentAttendance", recentAttendance);
        }

        request.setAttribute("pageTitle", "Staff Dashboard - Dawn Airlines");
        request.getRequestDispatcher("/WEB-INF/page/staffDashboard.jsp").forward(request, response);
    }

    private Map<String, Long> calculatePerformanceDistribution(List<PerformanceReview> reviews) {
        Map<String, Long> distribution = new LinkedHashMap<>();
        distribution.put("Excellent", reviews.stream().filter(r -> "Excellent".equals(r.getRating())).count());
        distribution.put("Good", reviews.stream().filter(r -> "Good".equals(r.getRating())).count());
        distribution.put("Average", reviews.stream().filter(r -> "Average".equals(r.getRating())).count());
        distribution.put("Poor", reviews.stream().filter(r -> "Poor".equals(r.getRating())).count());
        return distribution;
    }

    private PerformanceReview getTopPerformer(List<PerformanceReview> reviews) {
        return reviews.stream()
                .max(Comparator.comparingDouble(PerformanceReview::getPerformanceScore))
                .orElse(null);
    }

    private double calculateAverageRating(List<PerformanceReview> reviews) {
        return reviews.stream()
                .mapToDouble(PerformanceReview::getPerformanceScore)
                .average()
                .orElse(0.0);
    }
}