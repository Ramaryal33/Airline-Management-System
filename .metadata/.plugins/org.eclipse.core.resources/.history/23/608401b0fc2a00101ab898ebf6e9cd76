package com.airline.staff.service;

import com.airline.staff.model.Department;
import com.airline.config.DbConfig;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class StaffService {

    // Get all departments with manager info
    public List<Department> getAllDepartments() {
        List<Department> departmentList = new ArrayList<>();
        String sql = "SELECT * FROM department";
        try (Connection conn = DbConfig.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                Department department = new Department();
                department.setDepartmentId(rs.getInt("department_id"));
                department.setName(rs.getString("department_name"));
                department.setManagerId(rs.getInt("manager_id"));
                department.setDescription(rs.getString("description"));
                departmentList.add(department);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return departmentList;
    }

    // Add a department
    public boolean addDepartment(Department department) {
        String sql = "INSERT INTO department (department_name, manager_id, description) VALUES (?, ?, ?)";
        try (Connection conn = DbConfig.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, department.getName());
            stmt.setInt(2, department.getManagerId());
            stmt.setString(3, department.getDescription());
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // Update a department
    public boolean updateDepartment(Department department) {
        String sql = "UPDATE department SET department_name = ?, manager_id = ?, description = ? WHERE department_id = ?";
        try (Connection conn = DbConfig.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, department.getName());
            stmt.setInt(2, department.getManagerId());
            stmt.setString(3, department.getDescription());
            stmt.setInt(4, department.getDepartmentId());
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // Delete a department
    public boolean deleteDepartmentById(int departmentId) {
        String sql = "DELETE FROM department WHERE department_id = ?";
        try (Connection conn = DbConfig.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, departmentId);
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // Get a department by ID
    public Department getDepartmentById(int departmentId) {
        Department department = null;
        String sql = "SELECT * FROM department WHERE department_id = ?";
        try (Connection conn = DbConfig.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, departmentId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                department = new Department();
                department.setDepartmentId(rs.getInt("department_id"));
                department.setName(rs.getString("department_name"));
                department.setManagerId(rs.getInt("manager_id"));
                department.setDescription(rs.getString("description"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return department;
    }

	public void deleteStaffByUserId(int userId) {
		// TODO Auto-generated method stub
		
	}

	
}
