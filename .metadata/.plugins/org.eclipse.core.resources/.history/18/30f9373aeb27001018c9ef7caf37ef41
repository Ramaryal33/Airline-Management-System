package com.airline.util;

import com.airline.staff.model.Employee;
import java.sql.*;

public class EmployeeDAO {
    private final Connection conn;

    // Constructor that requires a Connection
    public EmployeeDAO(Connection conn) {
        if (conn == null) {
            throw new IllegalArgumentException("Database connection cannot be null");
        }
        this.conn = conn;
    }

    /**
     * Finds an employee by their email (case-insensitive)
     * @param email The email to search for
     * @return Employee if found, null otherwise
     * @throws SQLException If there's a database error
     */
    public Employee findByEmail(String email) throws SQLException {
        if (email == null || email.trim().isEmpty()) {
            throw new IllegalArgumentException("Email cannot be null or empty");
        }

        String sql = "SELECT * FROM employees WHERE LOWER(email) = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, email.toLowerCase().trim());
            
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return mapRowToEmployee(rs);
                }
            }
        }
        return null;
    }

    /**
     * Maps a ResultSet row to an Employee object
     * @param rs The ResultSet containing employee data
     * @return Mapped Employee object
     * @throws SQLException If there's an error reading from ResultSet
     */
    private Employee mapRowToEmployee(ResultSet rs) throws SQLException {
        Employee employee = new Employee();
        employee.setEmployeeId(rs.getInt("employee_id"));
        employee.setFullName(rs.getString("full_name"));
        employee.setDepartmentId(rs.getInt("department_id"));
        employee.setPosition(rs.getString("position"));
        employee.setJoinDate(rs.getDate("join_date"));
        employee.setStatus(rs.getString("status"));
        employee.setExperienceYears(rs.getInt("experience_years"));
        employee.setUsername(rs.getString("username"));
        employee.setPasswordHash(rs.getString("password_hash"));
        employee.setRole(rs.getString("role"));
        employee.setEmail(rs.getString("email"));
        return employee;
    }

    // Optional: Add a method to close the connection
    public void close() throws SQLException {
        if (conn != null && !conn.isClosed()) {
            conn.close();
        }
    }
}