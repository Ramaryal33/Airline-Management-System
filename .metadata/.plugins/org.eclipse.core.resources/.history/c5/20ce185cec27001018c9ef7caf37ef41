package com.airline.controller;

import com.airline.staff.model.Employee;
import com.airline.staff.service.EmployeeService;
import com.airline.staff.service.TaskService;
import com.airline.staff.service.TimeTrackingService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

@WebServlet("/staffDashboard")
public class StaffDashboardServlet extends HttpServlet {
    private EmployeeService employeeService;
    private TimeTrackingService timeTrackingService;
    private TaskService taskService;

    @Override
    public void init() throws ServletException {
        super.init();
        // Initialize services (would typically use dependency injection)
        this.employeeService = (EmployeeService) getServletContext().getAttribute("employeeService");
        this.timeTrackingService = (TimeTrackingService) getServletContext().getAttribute("timeTrackingService");
        this.taskService = (TaskService) getServletContext().getAttribute("taskService");
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // Check for valid session
        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("employee") == null) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }

        try {
            // Get employee from session and validate
            Employee sessionEmp = (Employee) session.getAttribute("employee");
            if (sessionEmp == null || sessionEmp.getEmployeeId() <= 0) {
                response.sendRedirect(request.getContextPath() + "/login");
                return;
            }

            // Refresh employee data from database
            Employee freshEmp = employeeService.getEmployeeById(sessionEmp.getEmployeeId());
            if (freshEmp == null) {
                session.invalidate(); // Clear invalid session
                response.sendRedirect(request.getContextPath() + "/login");
                return;
            }

            // Update session with fresh data
            session.setAttribute("employee", freshEmp);

            // Set request attributes
            request.setAttribute("employee", freshEmp);
            request.setAttribute("pageTitle", "Staff Dashboard - " + freshEmp.getFullName());
            request.setAttribute("cssPath", request.getContextPath() + "/css/staff.css");
            request.setAttribute("basePath", request.getContextPath());

            // Get dynamic dashboard data
            Map<String, Object> dashboardStats = getDashboardStatistics(freshEmp.getEmployeeId());
            request.setAttribute("totalEmployees", dashboardStats.get("totalEmployees"));
            request.setAttribute("totalHours", dashboardStats.get("totalHours"));
            request.setAttribute("activeTasks", dashboardStats.get("activeTasks"));
            request.setAttribute("pendingTasks", dashboardStats.get("pendingTasks"));

            // Forward to JSP
            request.getRequestDispatcher("/WEB-INF/page/staffDashboard.jsp").forward(request, response);
            
        } catch (SQLException e) {
            logError("Database error loading dashboard", e);
            request.setAttribute("error", "Unable to load dashboard data. Please try again.");
            request.getRequestDispatcher("/WEB-INF/page/error.jsp").forward(request, response);
        } catch (Exception e) {
            logError("Unexpected error in dashboard", e);
            response.sendRedirect(request.getContextPath() + "/login");
        }
    }

    private Map<String, Object> getDashboardStatistics(int employeeId) throws SQLException {
        Map<String, Object> stats = new HashMap<>();
        
        // Get statistics from services
        stats.put("totalEmployees", employeeService.getEmployeeCount());
        stats.put("totalHours", timeTrackingService.getMonthlyHours(employeeId));
        stats.put("activeTasks", taskService.getActiveTaskCount(employeeId));
        stats.put("pendingTasks", taskService.getPendingTaskCount(employeeId));
        
        return stats;
    }

    private void logError(String message, Exception e) {
        // In production, use a proper logging framework
        System.err.println("ERROR: " + message);
        e.printStackTrace();
    }
}