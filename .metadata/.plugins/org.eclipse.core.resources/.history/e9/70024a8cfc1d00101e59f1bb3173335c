package com.airline.controller;

import com.airline.model.User;
import com.airline.service.UserService;
import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.annotation.*;

import java.io.IOException;
import java.util.logging.Logger;

@SuppressWarnings("serial")
@WebServlet("/login")
public class LoginController extends HttpServlet {
    private static final Logger logger = Logger.getLogger(LoginController.class.getName());
    private final UserService userService = new UserService();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session != null && session.getAttribute("user") != null) {
            redirectToDashboard((User) session.getAttribute("user"), response);
            return;
        }
        request.getRequestDispatcher("/WEB-INF/page/login.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        String email = request.getParameter("email").trim().toLowerCase();
        String password = request.getParameter("password");
        
        try {
            User user = userService.login(email, password);

            if (user != null) {
                HttpSession session = request.getSession();
                session.setAttribute("user", user);
                session.setMaxInactiveInterval(30 * 60); // 30 minutes
                
                // Remember Me (optional)
                if ("on".equals(request.getParameter("remember"))) {
                    Cookie cookie = new Cookie("rememberToken", generateRememberToken(user));
                    cookie.setMaxAge(30 * 24 * 60 * 60); // 30 days
                    cookie.setHttpOnly(true);
                    cookie.setSecure(true);
                    cookie.setPath(request.getContextPath());
                    response.addCookie(cookie);
                }

                redirectToDashboard(user, response);
            } else {
                request.setAttribute("error", "Invalid email or password.");
                doGet(request, response);
            }
        } catch (Exception e) {
            logger.severe("Login error: " + e.getMessage());
            request.setAttribute("error", "Login failed. Please try again.");
            doGet(request, response);
        }
    }


private void redirectBasedOnUserType(User user, HttpServletResponse response) throws IOException {
    String dashboardPath;
    
    switch(user.getUserType().toLowerCase()) {
        case "admin":
            dashboardPath = request.getContextPath() + "/admin/dashboard";
            logger.info("Admin login: " + user.getEmail());
            break;
            
        case "staff":
            dashboardPath = request.getContextPath() + "/staff/dashboard";
            logger.info("Staff login: " + user.getEmail());
            break;
            
        default:
            dashboardPath = request.getContextPath() + "/user/dashboard";
            logger.info("User login: " + user.getEmail());
    }
    
    response.sendRedirect(dashboardPath);
}


    private String generateRememberToken(User user) {
        // In production, use JWT or encrypted token with expire
        return user.getId() + "|" + System.currentTimeMillis();
    }
}
