package com.airline.filter;

import com.airline.model.User;
import jakarta.servlet.*;
import jakarta.servlet.annotation.WebFilter;
import jakarta.servlet.http.*;
import java.io.IOException;

@WebFilter("/*")
public class AuthFilter implements Filter {
    @Override
    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)
            throws IOException, ServletException {
        
        HttpServletRequest request = (HttpServletRequest) req;
        HttpServletResponse response = (HttpServletResponse) res;
        String path = request.getRequestURI().substring(request.getContextPath().length());

        // Skip filtering for public resources
        if (path.startsWith("/login") || 
            path.startsWith("/resources/") || 
            path.endsWith(".css") || 
            path.endsWith(".js") || 
            path.endsWith(".jpg")) {
            chain.doFilter(request, response);
            return;
        }

        HttpSession session = request.getSession(false);
        User user = session != null ? (User) session.getAttribute("user") : null;

        // Check authentication
        if (user == null) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }

        // Check authorization
        if (!isAuthorized(user.getUserType(), path)) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN);
            return;
        }

        chain.doFilter(request, response);
    }

    private boolean isAuthorized(String userType, String path) {
        if (path.startsWith("/admin/")) {
            return "admin".equalsIgnoreCase(userType);
        }
        if (path.startsWith("/staff/")) {
            return "staff".equalsIgnoreCase(userType);
        }
        return true; // All logged-in users can access passenger paths
    }
}