package com.airline.controller;

import com.airline.staff.model.Department;
import com.airline.staff.service.DepartmentService;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.annotation.*;

import java.io.IOException;
import java.util.List;

@SuppressWarnings("serial")
@WebServlet("/StaffDepartment")
public class DepartmentController extends HttpServlet {

    private final DepartmentService departmentService = new DepartmentService();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");

        if ("list".equals(action)) {
            List<Department> departmentList = departmentService.getAllDepartments();
            request.setAttribute("departmentList", departmentList);
            request.getRequestDispatcher("/WEB-INF/page/StaffDepartment.jsp").forward(request, response);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String action = request.getParameter("action");

        if ("add".equals(action)) {
            String departmentName = request.getParameter("department_name");
            int managerId = Integer.parseInt(request.getParameter("manager_id"));
            String description = request.getParameter("description");

            Department department = new Department();
            department.setName(departmentName);
            department.setManagerId(managerId);
            department.setDescription(description);

            if (departmentService.addDepartment(department)) {
                response.sendRedirect("department?action=list");
            } else {
                response.getWriter().println("Failed to add department");
            }
        } else if ("update".equals(action)) {
            int departmentId = Integer.parseInt(request.getParameter("department_id"));
            String departmentName = request.getParameter("department_name");
            int managerId = Integer.parseInt(request.getParameter("manager_id"));
            String description = request.getParameter("description");

            Department department = new Department();
            department.setDepartmentId(departmentId);
            department.setName(departmentName);
            department.setManagerId(managerId);
            department.setDescription(description);

            if (departmentService.updateDepartment(department)) {
                response.sendRedirect("department?action=list");
            } else {
                response.getWriter().println("Failed to update department");
            }
        } else if ("delete".equals(action)) {
            int departmentId = Integer.parseInt(request.getParameter("department_id"));
            if (departmentService.deleteDepartmentById(departmentId)) {
                response.sendRedirect("department?action=list");
            } else {
                response.getWriter().println("Failed to delete department");
            }
        }
    }
}
