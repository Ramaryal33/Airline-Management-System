package com.airline.service;

import com.airline.config.DbConfig;
import com.airline.model.User;
import com.airline.util.PasswordUtil;

import java.security.NoSuchAlgorithmException;
import java.sql.*;
import java.util.logging.Logger;

public class UserService {
    private static final Logger logger = Logger.getLogger(UserService.class.getName());

    public User authenticate(String email, String password, String userType)
            throws SQLException, NoSuchAlgorithmException {

        String sql = "SELECT * FROM users WHERE Email = ? AND userType = ? AND Active = 1";

        try (Connection conn = DbConfig.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, email);
            stmt.setString(2, userType);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    String storedPassword = rs.getString("Password");

                    // Perform password check
                    boolean match = PasswordUtil.checkPassword(password, storedPassword);

                    // Debugging output
                    System.out.println("[DEBUG] Logging in user: " + email);
                    System.out.println("[DEBUG] Stored password: " + storedPassword);
                    System.out.println("[DEBUG] Password match: " + match);
                    System.out.println("[DEBUG] UserType from DB: " + rs.getString("userType"));

                    if (match) {
                        logger.info("Authentication successful for: " + email);
                        return mapUserFromResultSet(rs);
                    } else {
                        logger.warning("Password mismatch for user: " + email);
                    }
                } else {
                    logger.warning("User not found or inactive: " + email);
                }
                return null;
            }
        } catch (SQLException e) {
            logger.severe("SQL error during authentication: " + e.getMessage());
            throw e;
        }
    }


    public User authenticateByEmailOnly(String email, String password)
            throws SQLException, NoSuchAlgorithmException {

        String sql = "SELECT * FROM users WHERE Email = ? AND Active = 1";

        try (Connection conn = DbConfig.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, email);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    String storedPassword = rs.getString("Password");
                    if (PasswordUtil.checkPassword(password, storedPassword)) {
                        logger.info("Authenticated via email only: " + email);
                        return mapUserFromResultSet(rs);
                    } else {
                        logger.warning("Password mismatch (email only login) for: " + email);
                    }
                } else {
                    logger.warning("User not found or inactive (email only login): " + email);
                }
            }

        } catch (SQLException e) {
            logger.severe("SQL error (email-only auth): " + e.getMessage());
            throw e;
        }
        return null;
    }

    public boolean registerUser(User user) throws SQLException, NoSuchAlgorithmException {
        if (emailExists(user.getEmail())) {
            logger.warning("Registration attempt with existing email: " + user.getEmail());
            throw new SQLException("Email already registered");
        }

        String sql = "INSERT INTO users (FullName, Email, Phone, Password, userType, Active) " +
                     "VALUES (?, ?, ?, ?, ?, ?)";

        try (Connection conn = DbConfig.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            String hashedPassword = PasswordUtil.hashPassword(user.getPassword());

            stmt.setString(1, user.getFullName());
            stmt.setString(2, user.getEmail());
            stmt.setString(3, user.getPhone());
            stmt.setString(4, hashedPassword);
            stmt.setString(5, user.getUserType());
            stmt.setBoolean(6, user.isActive());

            int affectedRows = stmt.executeUpdate();

            if (affectedRows > 0) {
                try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        user.setId(generatedKeys.getInt(1));
                        logger.info("User registered successfully: ID=" + user.getId());
                        return true;
                    }
                }
            }

            logger.warning("Registration failed - no rows affected.");
            return false;

        } catch (SQLException e) {
            logger.severe("SQL error during registration: " + e.getMessage());
            throw e;
        }
    }

    public boolean emailExists(String email) throws SQLException {
        String sql = "SELECT 1 FROM users WHERE Email = ?";

        try (Connection conn = DbConfig.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, email);
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next();
            }

        } catch (SQLException e) {
            logger.severe("SQL error checking email existence: " + e.getMessage());
            throw e;
        }
    }

    public boolean testConnection() {
        try (Connection conn = DbConfig.getConnection()) {
            return conn != null && !conn.isClosed();
        } catch (SQLException e) {
            logger.severe("Database connection test failed: " + e.getMessage());
            return false;
        }
    }

    private User mapUserFromResultSet(ResultSet rs) throws SQLException {
        User user = new User();
        user.setId(rs.getInt("ID"));
        user.setFullName(rs.getString("FullName"));
        user.setEmail(rs.getString("Email"));
        user.setPhone(rs.getString("Phone"));
        user.setPassword(rs.getString("Password"));
        user.setUserType(rs.getString("userType"));
        user.setActive(rs.getBoolean("Active"));
        return user;
    }
}
